import googlemaps
import pandas as pd
import time

# Initialize Google Maps client with your API key
gmaps = googlemaps.Client(key='YourAPIKEy')

# List of zip codes to search within
zip_codes = ["59969",	"64743",	"64711",	"64743",	"64757",	"64754",	"64711",	"64760",	"60310",	"60306",	"60438",	"60596",	"60487",	"60594",	"60325",	"60322",	"60308",	"60316",	"63633",	"63699",	"63637",	"63636",	"63619",	"63607",	"63599",	"63594",	"63589",	"63571",	"63589",	"63584",	"63546",	"63543",	"63543",	"63526",	"63505",	"63486",	"34317",	"34314",	"34277",	"34246",	"34292",	"34246",	"34479",	"34466",	"34396",	"34393",	"34379",	"34376",	"34320",	"34311",	"34308",	"34298",	"34289",	"34260",	"34253",	"34225",	"34225",	"34295",	"61250",	"37296",	"37293",	"37287",	"37284",	"37281",	"37276",	"37269",	"37247",	"37242",	"37235",	"37290",	"36205",	"36286",	"36284",	"36282",	"36277",	"36275",	"36272",	"36269",	"36266",	"36217",	"36214",	"36208",	"36219",	"36211",	"36208",	"36199",	"36179",	"36166",	"36151",	"36166",	"34637",	"34633",	"34632",	"34630",	"34628",	"34626",	"34621",	"34613",	"34599",	"34596",	"34593",	"34590",	"34576",	"34587",	"34582",	"34576",	"34560",	"36381",	"36367",	"36364",	"36100",	"34508",	"35119",	"36169",	"36167",	"36163",	"36160",	"36157",	"36154",	"36154",	"36119",	"36148",	"36145",	"36142",	"36137",	"36132",	"36129",	"36124",	"36103",	"36093",	"36088",	"35285",	"35116",	"35114",	"35110",	"35108",	"59969",	"35104",	"35099",	"35088",	"35066",	"34549",	"34537",	"34519",	"34516",	"34513",	"34516",	"34513",	"34497",	"34477",	"34474",	"34471",	"34454",	"36369",	"36358",	"36355",	"36341",	"36329",	"36326",	"36320",	"36326",	"36325",	"36323",	"36318",	"36304",	"36304",	"36110",	"35329",	"35327",	"35325",	"35315",	"35232",	"35216",	"35117",	"35112",	"35102",	"35096",	"35091",	"35085",	"35083",	"35080",	"35075",	"35768",	"35745",	"35716",	"35713",	"35708",	"35649",	"35644",	"35641",	"35638",	"35633",	"35630",	"35614",	"35630",	"35625",	"35619",	"35606",	"63110",	"63322",	"63128",	"63150",	"63303",	"63225",	"63329",	"63263",	"63165",	"63477",	"34385",	"63549",	"63505",	"63639",	"63694",	"63688",	"63699",	"63697",	"63695",	"63691",	"63683",	"63674",	"63667",	"63654",	"34359",	"34329",	"34266",	"35519",	"35516",	"35510",	"35428",	"37299",	"37297",	"36289",	"36287",	"36219",	"34323",	"36280",	"34639",	"34327",	"34326",	"34305",	"34281",	"34305",	"34302",	"34286",	"34270",	"34212",	"65627",	"65604",	"35799",	"65620",	"65618",	"65614",	"65611",	"65606",	"65599",	"65594",	"65589",	"35796",	"35794",	"35792",	"35789",	"35781",	"35469",	"35466",	"35463",	"35460",	"35457",	"35452",	"35447",	"35444",	"35440",	"35435",	"35423",	"35418",	"35415",	"35410",	"35321",	"35305",	"35094",	"35094",	"35041",	"35037",	"35043",	"35039",	"63679",	"36399",	"35719",	"35288",	"35287",	"35282",	"35279",	"35274",	"35260",	"35239",	"35236",	"35767",	"35764",	"35759",	"35756",	"35753",	"63776",	"63579",	"63533",	"63500",	"63512",	"63538",	"63517",	"34388",	"34399",	"37194",	"64832",	"63179",	"65597",	"65307",	"65388",	"36396",	"36391",	"35398",	"35392",	"35396",	"35394",	"35390",	"36251",	"36115",	"63065",	"63071",	"63073",	"63067",	"63069",	"63075",	"63452",	"63450",	"63457",	"63454",	"63456",	"37249",	"55252",	"55246",	"37217",	"37214",	"37213",	"37216",	"37215",	"37218",	"34130",	"34119",	"34121",	"34123",	"34369",	"65203",	"65183",	"65193",	"65187",	"65191",	"34355",	"34233",	"64757",	"69434",	"69412",	"64757",	"64385",	"64753",	"64385",	"64658",	"64347",	"64807",	"64846",	"64397",	"64665",	"64521",	"34127",	"34233",	"34127",	"34117",	"34134",	"34132",	"34131",	"34128",	"34125",	"65197",	"65199",	"60320",	"65207",	"65205",	"65201",	"65195",	"65189",	"65185",	"64750",	"64395",	"64853",	"64395",	"64395",	"64401",	"64395",	"64354",	"64756",	"64689",	"64668",	"64653",	"64683",	"64754",	"64686",	"64739",	"64720",	"64646",	"64678",	"64658",	"64753",	"64407",	"64732",	"64747",	"64625",	"64673",	"64589",	"64405",	"64390",	"64850",	"64285",	"64295",	"64291",	"64287",	"64297",	"64293",	"64283",	"64289",	"64546",	"64839",	"64572",	"64331",	"64372",	"64409",	"64823",	"64560",	"64404",	"64584",	"64579",	"64342",	"64380",	"64569",	"60327",	"64859",	"64367",	"60529",	"64319",	"60599",	"60313",	"60314",	"60389",	"60486",	"60528",	"60433",	"60329",	"60385",	"60326",	"60388",	"60318",	"60439",	"60489",	"60386",	"61479",	"65510",	"61191",	"61381",	"61449",	"60311",	"61239",	"61273",	"61279",	"61169",	"60431",	"60435",	"60437",	"60598",	"60323",	"60488",	"60549",	"61276",	"61137",	"61348",	"61350",	"61352",	"61209",	"61200",	"61194",	"61130",	"61197",	"61476",	"61118",	"61130",	"61138",	"61389",	"61231",	"61440",	"61462",	"61206",	"61184",	"61203",	"61267",	"36039",	"36037",	"36043",	"36041",	"69509",	"69483",	"65550",	"65552",	"65551",	"65555",	"65553",	"65556",	"65554",	"65549",	"69518",	"69488",	"69239",	"69517",	"65232",	"65326",	"65399",	"65375",	"65933",	"65934",	"65936",	"65795",	"68647",	"68649",	"68623",	"68642",	"68519",	"65520",	"65385",	"65385",	"65366",	"65345",	"65343",	"65346",	"65344",	"65347",	"65510",	"65321",	"65396",	"65527",	"65391",	"65529",	"65329",	"65779",	"65830",	"65760",	"65719",	"65239",	"65929",	"65817",	"65835",	"65439",	"65931",	"65824",	"65843",	"65812",	"65479",	"65451",	"65462",	"65474",	"65428",	"65468",	"35586",	"35578",	"35579",	"35580",	"35585",	"35583",	"35582",	"35581",	"35576",	"35584",	"35687",	"35690",	"35686",	"35684",	"35688",	"35685",	"35683",	"35689",	"63628",	"35647"]  # Example zip code for Bad Soden

# DataFrame to collect all data
all_data = pd.DataFrame(columns=["Name", "Address", "Phone", "Website", "Zip Code"])

# Function to get latitude and longitude from zip code
def get_lat_lng(zip_code):
    geocode_result = gmaps.geocode(zip_code + ', Germany')
    if geocode_result:
        location = geocode_result[0]['geometry']['location']
        return (location['lat'], location['lng'])
    return None, None

# Function to perform the search and handle pagination
def search_places_by_zip(zip_code):
    latitude, longitude = get_lat_lng(zip_code)
    if latitude and longitude:
        query = f"property manager in {zip_code}, Germany"
        results = gmaps.places(query=query, location=(latitude, longitude), radius=1000)  # Adjusted smaller radius

        # Collect results from all pages
        while True:
            for place in results['results']:
                place_id = place['place_id']
                place_details = gmaps.place(place_id=place_id)['result']  # Fetch detailed information

                if zip_code in place_details.get('formatted_address', ''):
                    all_data.loc[len(all_data)] = [
                        place_details.get('name', ''),
                        place_details.get('formatted_address', ''),
                        place_details.get('formatted_phone_number', ''),
                        place_details.get('website', ''),
                        zip_code
                    ]

            # Check if there are more pages
            if 'next_page_token' in results:
                next_page_token = results['next_page_token']
                time.sleep(2)  # Delay for API stability
                results = gmaps.places(query=query, location=(latitude, longitude), radius=1000, page_token=next_page_token)
            else:
                break

# Loop through each zip code and perform the search
for zip_code in zip_codes:
    search_places_by_zip(zip_code)

# Save data to Excel file
all_data.sort_values(by="Zip Code").to_excel("property_managers.xlsx", index=False, engine='openpyxl')

print("Data has been successfully saved to 'property_managers.xlsx'")
